memberSearchIndex = [{"p":"io.github.jonloucks.concurrency.api","c":"Idempotent.Transition","l":"action()"},{"p":"io.github.jonloucks.concurrency.api","c":"Idempotent.Transition.Builder","l":"action(Runnable)","u":"action(java.lang.Runnable)"},{"p":"io.github.jonloucks.concurrency.api","c":"Idempotent.Transition.Builder","l":"action(Supplier<T>)","u":"action(java.util.function.Supplier)"},{"p":"io.github.jonloucks.concurrency.api","c":"Idempotent.Transition","l":"always()"},{"p":"io.github.jonloucks.concurrency.api","c":"Idempotent.Transition.Builder","l":"always(boolean)"},{"p":"io.github.jonloucks.concurrency.api","c":"Idempotent.State","l":"canTransitionTo(Idempotent.State)","u":"canTransitionTo(io.github.jonloucks.concurrency.api.Idempotent.State)"},{"p":"io.github.jonloucks.concurrency.api","c":"Idempotent.State","l":"CLOSED"},{"p":"io.github.jonloucks.concurrency.api","c":"Idempotent.State","l":"CLOSING"},{"p":"io.github.jonloucks.concurrency.api","c":"ConcurrencyException","l":"ConcurrencyException(String)","u":"%3Cinit%3E(java.lang.String)"},{"p":"io.github.jonloucks.concurrency.api","c":"ConcurrencyException","l":"ConcurrencyException(String, Throwable)","u":"%3Cinit%3E(java.lang.String,java.lang.Throwable)"},{"p":"io.github.jonloucks.concurrency.api","c":"Concurrency","l":"CONTRACT"},{"p":"io.github.jonloucks.concurrency.api","c":"ConcurrencyFactory","l":"CONTRACT"},{"p":"io.github.jonloucks.concurrency.api","c":"Concurrency.Config","l":"contracts()"},{"p":"io.github.jonloucks.concurrency.api","c":"Concurrency.Config.Builder","l":"contracts(Contracts)","u":"contracts(io.github.jonloucks.contracts.api.Contracts)"},{"p":"io.github.jonloucks.concurrency.api","c":"ConcurrencyFactory","l":"create(Concurrency.Config)","u":"create(io.github.jonloucks.concurrency.api.Concurrency.Config)"},{"p":"io.github.jonloucks.concurrency.api","c":"ConcurrencyFactory","l":"create(Consumer<Concurrency.Config.Builder>)","u":"create(java.util.function.Consumer)"},{"p":"io.github.jonloucks.concurrency.api","c":"GlobalConcurrency","l":"createConcurrency(Concurrency.Config)","u":"createConcurrency(io.github.jonloucks.concurrency.api.Concurrency.Config)"},{"p":"io.github.jonloucks.concurrency.api","c":"Concurrency.Config","l":"DEFAULT"},{"p":"io.github.jonloucks.concurrency.api","c":"Concurrency.Config.Builder","l":"FACTORY"},{"p":"io.github.jonloucks.concurrency.api","c":"Idempotent","l":"FACTORY"},{"p":"io.github.jonloucks.concurrency.api","c":"GlobalConcurrency","l":"findConcurrencyFactory(Concurrency.Config)","u":"findConcurrencyFactory(io.github.jonloucks.concurrency.api.Concurrency.Config)"},{"p":"io.github.jonloucks.concurrency.api","c":"GlobalConcurrency","l":"getInstance()"},{"p":"io.github.jonloucks.concurrency.api","c":"Idempotent","l":"getState()"},{"p":"io.github.jonloucks.concurrency.api","c":"Idempotent.Transition","l":"goalState()"},{"p":"io.github.jonloucks.concurrency.api","c":"Idempotent.Transition.Builder","l":"goalState(Idempotent.State)","u":"goalState(io.github.jonloucks.concurrency.api.Idempotent.State)"},{"p":"io.github.jonloucks.concurrency.api","c":"Idempotent.State","l":"INITIAL"},{"p":"io.github.jonloucks.concurrency.api","c":"ConcurrencyFactory","l":"install(Concurrency.Config, Repository)","u":"install(io.github.jonloucks.concurrency.api.Concurrency.Config,io.github.jonloucks.contracts.api.Repository)"},{"p":"io.github.jonloucks.concurrency.api","c":"Idempotent.Transition","l":"interimState()"},{"p":"io.github.jonloucks.concurrency.api","c":"Idempotent.Transition.Builder","l":"interimState(Idempotent.State)","u":"interimState(io.github.jonloucks.concurrency.api.Idempotent.State)"},{"p":"io.github.jonloucks.concurrency.api","c":"Idempotent.State","l":"isRejecting()"},{"p":"io.github.jonloucks.concurrency.api","c":"Idempotent.State","l":"OPENED"},{"p":"io.github.jonloucks.concurrency.api","c":"Idempotent.State","l":"OPENING"},{"p":"io.github.jonloucks.concurrency.api","c":"Idempotent.Transition","l":"orElse()"},{"p":"io.github.jonloucks.concurrency.api","c":"Idempotent.Transition.Builder","l":"orElse(Supplier<T>)","u":"orElse(java.util.function.Supplier)"},{"p":"io.github.jonloucks.concurrency.api","c":"Concurrency.Config","l":"reflectionClassName()"},{"p":"io.github.jonloucks.concurrency.api","c":"Concurrency.Config.Builder","l":"reflectionClassName(String)","u":"reflectionClassName(java.lang.String)"},{"p":"io.github.jonloucks.concurrency.api","c":"Concurrency.Config","l":"serviceLoaderClass()"},{"p":"io.github.jonloucks.concurrency.api","c":"Concurrency.Config.Builder","l":"serviceLoaderClass(Class<? extends ConcurrencyFactory>)","u":"serviceLoaderClass(java.lang.Class)"},{"p":"io.github.jonloucks.concurrency.api","c":"Concurrency.Config","l":"shutdownTimeout()"},{"p":"io.github.jonloucks.concurrency.api","c":"Concurrency.Config.Builder","l":"shutdownTimeout(Duration)","u":"shutdownTimeout(java.time.Duration)"},{"p":"io.github.jonloucks.concurrency.api","c":"Idempotent","l":"transition(Consumer<Idempotent.Transition.Builder<T>>)","u":"transition(java.util.function.Consumer)"},{"p":"io.github.jonloucks.concurrency.api","c":"Idempotent","l":"transition(Idempotent.State)","u":"transition(io.github.jonloucks.concurrency.api.Idempotent.State)"},{"p":"io.github.jonloucks.concurrency.api","c":"Idempotent","l":"transition(Idempotent.Transition<T>)","u":"transition(io.github.jonloucks.concurrency.api.Idempotent.Transition)"},{"p":"io.github.jonloucks.concurrency.api","c":"Idempotent","l":"transitionToClosed(Runnable)","u":"transitionToClosed(java.lang.Runnable)"},{"p":"io.github.jonloucks.concurrency.api","c":"Idempotent","l":"transitionToOpened(Supplier<AutoClose>)","u":"transitionToOpened(java.util.function.Supplier)"},{"p":"io.github.jonloucks.concurrency.api","c":"Concurrency.Config","l":"useReflection()"},{"p":"io.github.jonloucks.concurrency.api","c":"Concurrency.Config.Builder","l":"useReflection(boolean)"},{"p":"io.github.jonloucks.concurrency.api","c":"Concurrency.Config","l":"useServiceLoader()"},{"p":"io.github.jonloucks.concurrency.api","c":"Concurrency.Config.Builder","l":"useServiceLoader(boolean)"},{"p":"io.github.jonloucks.concurrency.api","c":"Idempotent.State","l":"valueOf(String)","u":"valueOf(java.lang.String)"},{"p":"io.github.jonloucks.concurrency.api","c":"Idempotent.State","l":"values()"}];updateSearchResults();