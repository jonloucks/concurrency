memberSearchIndex = [{"p":"io.github.jonloucks.concurrency.api","c":"Waitable","l":"accept(T)"},{"p":"io.github.jonloucks.concurrency.api","c":"Waitable","l":"acceptIf(Predicate<T>, T)","u":"acceptIf(java.util.function.Predicate,T)"},{"p":"io.github.jonloucks.concurrency.api","c":"Idempotent","l":"canTransition(String, Idempotent)","u":"canTransition(java.lang.String,io.github.jonloucks.concurrency.api.Idempotent)"},{"p":"io.github.jonloucks.concurrency.api","c":"StateMachine.Rule","l":"canTransition(String, T)","u":"canTransition(java.lang.String,T)"},{"p":"io.github.jonloucks.concurrency.api","c":"Idempotent","l":"CLOSED"},{"p":"io.github.jonloucks.concurrency.api","c":"Idempotent","l":"CLOSING"},{"p":"io.github.jonloucks.concurrency.api","c":"ConcurrencyException","l":"ConcurrencyException(String)","u":"%3Cinit%3E(java.lang.String)"},{"p":"io.github.jonloucks.concurrency.api","c":"ConcurrencyException","l":"ConcurrencyException(String, Throwable)","u":"%3Cinit%3E(java.lang.String,java.lang.Throwable)"},{"p":"io.github.jonloucks.concurrency.api","c":"Concurrency","l":"CONTRACT"},{"p":"io.github.jonloucks.concurrency.api","c":"ConcurrencyFactory","l":"CONTRACT"},{"p":"io.github.jonloucks.concurrency.api","c":"StateMachineFactory","l":"CONTRACT"},{"p":"io.github.jonloucks.concurrency.api","c":"WaitableFactory","l":"CONTRACT"},{"p":"io.github.jonloucks.concurrency.api","c":"Concurrency.Config","l":"contracts()"},{"p":"io.github.jonloucks.concurrency.api","c":"Concurrency.Config.Builder","l":"contracts(Contracts)","u":"contracts(io.github.jonloucks.contracts.api.Contracts)"},{"p":"io.github.jonloucks.concurrency.api","c":"StateMachineFactory","l":"create(Class<T>, T)","u":"create(java.lang.Class,T)"},{"p":"io.github.jonloucks.concurrency.api","c":"ConcurrencyFactory","l":"create(Concurrency.Config)","u":"create(io.github.jonloucks.concurrency.api.Concurrency.Config)"},{"p":"io.github.jonloucks.concurrency.api","c":"ConcurrencyFactory","l":"create(Consumer<Concurrency.Config.Builder>)","u":"create(java.util.function.Consumer)"},{"p":"io.github.jonloucks.concurrency.api","c":"StateMachineFactory","l":"create(Consumer<StateMachine.Config.Builder<T>>)","u":"create(java.util.function.Consumer)"},{"p":"io.github.jonloucks.concurrency.api","c":"StateMachineFactory","l":"create(StateMachine.Config<T>)","u":"create(io.github.jonloucks.concurrency.api.StateMachine.Config)"},{"p":"io.github.jonloucks.concurrency.api","c":"StateMachineFactory","l":"create(T)"},{"p":"io.github.jonloucks.concurrency.api","c":"WaitableFactory","l":"create(T)"},{"p":"io.github.jonloucks.concurrency.api","c":"GlobalConcurrency","l":"createConcurrency(Concurrency.Config)","u":"createConcurrency(io.github.jonloucks.concurrency.api.Concurrency.Config)"},{"p":"io.github.jonloucks.concurrency.api","c":"Concurrency","l":"createStateMachine(Class<T>, T)","u":"createStateMachine(java.lang.Class,T)"},{"p":"io.github.jonloucks.concurrency.api","c":"GlobalConcurrency","l":"createStateMachine(Class<T>, T)","u":"createStateMachine(java.lang.Class,T)"},{"p":"io.github.jonloucks.concurrency.api","c":"Concurrency","l":"createStateMachine(Consumer<StateMachine.Config.Builder<T>>)","u":"createStateMachine(java.util.function.Consumer)"},{"p":"io.github.jonloucks.concurrency.api","c":"Idempotent","l":"createStateMachine(Contracts)","u":"createStateMachine(io.github.jonloucks.contracts.api.Contracts)"},{"p":"io.github.jonloucks.concurrency.api","c":"Concurrency","l":"createStateMachine(T)"},{"p":"io.github.jonloucks.concurrency.api","c":"GlobalConcurrency","l":"createStateMachine(T)"},{"p":"io.github.jonloucks.concurrency.api","c":"Concurrency","l":"createWaitable(T)"},{"p":"io.github.jonloucks.concurrency.api","c":"GlobalConcurrency","l":"createWaitable(T)"},{"p":"io.github.jonloucks.concurrency.api","c":"Concurrency.Config","l":"DEFAULT"},{"p":"io.github.jonloucks.concurrency.api","c":"Idempotent","l":"DESTROYED"},{"p":"io.github.jonloucks.concurrency.api","c":"StateMachine.Transition.Builder","l":"errorState(S)"},{"p":"io.github.jonloucks.concurrency.api","c":"StateMachine.Transition.Builder","l":"errorValue(Supplier<R>)","u":"errorValue(java.util.function.Supplier)"},{"p":"io.github.jonloucks.concurrency.api","c":"StateMachine.Transition.Builder","l":"event(String)","u":"event(java.lang.String)"},{"p":"io.github.jonloucks.concurrency.api","c":"Concurrency.Config.Builder","l":"FACTORY"},{"p":"io.github.jonloucks.concurrency.api","c":"StateMachine.Transition.Builder","l":"failedState(S)"},{"p":"io.github.jonloucks.concurrency.api","c":"StateMachine.Transition.Builder","l":"failedValue(Supplier<R>)","u":"failedValue(java.util.function.Supplier)"},{"p":"io.github.jonloucks.concurrency.api","c":"GlobalConcurrency","l":"findConcurrencyFactory(Concurrency.Config)","u":"findConcurrencyFactory(io.github.jonloucks.concurrency.api.Concurrency.Config)"},{"p":"io.github.jonloucks.concurrency.api","c":"Waitable","l":"get()"},{"p":"io.github.jonloucks.concurrency.api","c":"StateMachine.Transition","l":"getErrorState()"},{"p":"io.github.jonloucks.concurrency.api","c":"StateMachine.Transition","l":"getErrorValue()"},{"p":"io.github.jonloucks.concurrency.api","c":"StateMachine.Transition","l":"getEvent()"},{"p":"io.github.jonloucks.concurrency.api","c":"StateMachine.Transition","l":"getFailedState()"},{"p":"io.github.jonloucks.concurrency.api","c":"StateMachine.Transition","l":"getFailedValue()"},{"p":"io.github.jonloucks.concurrency.api","c":"Waitable","l":"getIf(Predicate<T>)","u":"getIf(java.util.function.Predicate)"},{"p":"io.github.jonloucks.concurrency.api","c":"StateMachine.Config","l":"getInitial()"},{"p":"io.github.jonloucks.concurrency.api","c":"GlobalConcurrency","l":"getInstance()"},{"p":"io.github.jonloucks.concurrency.api","c":"StateMachine","l":"getState()"},{"p":"io.github.jonloucks.concurrency.api","c":"StateMachine.Config","l":"getStateRules(T)"},{"p":"io.github.jonloucks.concurrency.api","c":"StateMachine.Config","l":"getStates()"},{"p":"io.github.jonloucks.concurrency.api","c":"StateMachine.Transition","l":"getSuccessState()"},{"p":"io.github.jonloucks.concurrency.api","c":"StateMachine.Transition","l":"getSuccessValue()"},{"p":"io.github.jonloucks.concurrency.api","c":"StateMachine","l":"hasState(T)"},{"p":"io.github.jonloucks.concurrency.api","c":"StateMachine.Config.Builder","l":"initial(T)"},{"p":"io.github.jonloucks.concurrency.api","c":"ConcurrencyFactory","l":"install(Concurrency.Config, Repository)","u":"install(io.github.jonloucks.concurrency.api.Concurrency.Config,io.github.jonloucks.contracts.api.Repository)"},{"p":"io.github.jonloucks.concurrency.api","c":"Idempotent","l":"isRejecting()"},{"p":"io.github.jonloucks.concurrency.api","c":"StateMachine","l":"isTransitionAllowed(String, T)","u":"isTransitionAllowed(java.lang.String,T)"},{"p":"io.github.jonloucks.concurrency.api","c":"Idempotent","l":"OPENABLE"},{"p":"io.github.jonloucks.concurrency.api","c":"Idempotent","l":"OPENED"},{"p":"io.github.jonloucks.concurrency.api","c":"Idempotent","l":"OPENING"},{"p":"io.github.jonloucks.concurrency.api","c":"Concurrency.Config","l":"reflectionClassName()"},{"p":"io.github.jonloucks.concurrency.api","c":"Concurrency.Config.Builder","l":"reflectionClassName(String)","u":"reflectionClassName(java.lang.String)"},{"p":"io.github.jonloucks.concurrency.api","c":"StateMachine.Config.Builder","l":"rule(T, StateMachine.Rule<T>)","u":"rule(T,io.github.jonloucks.concurrency.api.StateMachine.Rule)"},{"p":"io.github.jonloucks.concurrency.api","c":"StateMachine.Config.Builder","l":"rules(T, List<StateMachine.Rule<T>>)","u":"rules(T,java.util.List)"},{"p":"io.github.jonloucks.concurrency.api","c":"Concurrency.Config","l":"serviceLoaderClass()"},{"p":"io.github.jonloucks.concurrency.api","c":"Concurrency.Config.Builder","l":"serviceLoaderClass(Class<? extends ConcurrencyFactory>)","u":"serviceLoaderClass(java.lang.Class)"},{"p":"io.github.jonloucks.concurrency.api","c":"StateMachine","l":"setState(String, T)","u":"setState(java.lang.String,T)"},{"p":"io.github.jonloucks.concurrency.api","c":"Waitable","l":"shutdown()"},{"p":"io.github.jonloucks.concurrency.api","c":"Concurrency.Config","l":"shutdownTimeout()"},{"p":"io.github.jonloucks.concurrency.api","c":"Concurrency.Config.Builder","l":"shutdownTimeout(Duration)","u":"shutdownTimeout(java.time.Duration)"},{"p":"io.github.jonloucks.concurrency.api","c":"StateMachine.Config.Builder","l":"state(T)"},{"p":"io.github.jonloucks.concurrency.api","c":"StateMachine.Config.Builder","l":"states(List<T>)","u":"states(java.util.List)"},{"p":"io.github.jonloucks.concurrency.api","c":"StateMachine.Transition.Builder","l":"successState(S)"},{"p":"io.github.jonloucks.concurrency.api","c":"StateMachine.Transition.Builder","l":"successValue(Runnable)","u":"successValue(java.lang.Runnable)"},{"p":"io.github.jonloucks.concurrency.api","c":"StateMachine.Transition.Builder","l":"successValue(Supplier<R>)","u":"successValue(java.util.function.Supplier)"},{"p":"io.github.jonloucks.concurrency.api","c":"StateMachine","l":"transition(Consumer<StateMachine.Transition.Builder<B, T, R>>)","u":"transition(java.util.function.Consumer)"},{"p":"io.github.jonloucks.concurrency.api","c":"StateMachine","l":"transition(StateMachine.Transition<T, R>)","u":"transition(io.github.jonloucks.concurrency.api.StateMachine.Transition)"},{"p":"io.github.jonloucks.concurrency.api","c":"Concurrency.Config","l":"useReflection()"},{"p":"io.github.jonloucks.concurrency.api","c":"Concurrency.Config.Builder","l":"useReflection(boolean)"},{"p":"io.github.jonloucks.concurrency.api","c":"Concurrency.Config","l":"useServiceLoader()"},{"p":"io.github.jonloucks.concurrency.api","c":"Concurrency.Config.Builder","l":"useServiceLoader(boolean)"},{"p":"io.github.jonloucks.concurrency.api","c":"Idempotent","l":"valueOf(String)","u":"valueOf(java.lang.String)"},{"p":"io.github.jonloucks.concurrency.api","c":"Idempotent","l":"values()"},{"p":"io.github.jonloucks.concurrency.api","c":"Waitable","l":"waitFor(Predicate<T>)","u":"waitFor(java.util.function.Predicate)"},{"p":"io.github.jonloucks.concurrency.api","c":"Waitable","l":"waitFor(Predicate<T>, Duration)","u":"waitFor(java.util.function.Predicate,java.time.Duration)"},{"p":"io.github.jonloucks.concurrency.api","c":"Idempotent","l":"withClose(StateMachine<Idempotent>, AutoClose)","u":"withClose(io.github.jonloucks.concurrency.api.StateMachine,io.github.jonloucks.contracts.api.AutoClose)"},{"p":"io.github.jonloucks.concurrency.api","c":"Idempotent","l":"withOpen(StateMachine<Idempotent>, AutoOpen)","u":"withOpen(io.github.jonloucks.concurrency.api.StateMachine,io.github.jonloucks.contracts.api.AutoOpen)"}];updateSearchResults();